Create a comprehensive, desktop-optimized Settings UI for an Electron application that manages API keys, file paths, and generation parameters with native OS integration, secure storage using keytar, real-time validation, and cost indicators.

TECH STACK:
- React 18+ with TypeScript
- Tailwind CSS for styling
- Lucide React for icons
- Electron IPC for backend communication
- Native OS integration

COMPONENTS TO CREATE:

1. SettingsPanel.tsx - Main settings container with tab navigation
- Implement tab navigation with sections: API Keys, Files, Parameters, Advanced
- Add auto-save functionality with debounced form updates
- Include loading states and error handling
- Use Tailwind CSS for responsive design
- Add keyboard shortcuts (Ctrl+S to save)

2. SecureInput.tsx - Secure API key input with native credential manager
- Build a masked input field for API keys with show/hide toggle
- Implement real-time validation with visual feedback
- Add secure storage integration using keytar library
- Include error states and success confirmation
- Handle cases where native credential manager is unavailable
- Show secure storage status indicator

3. FileSelector.tsx - File/directory selector with native OS dialog
- Build file/directory selection with Electron's native dialog.showOpenDialog
- Add drag-and-drop support from OS file manager
- Implement path validation and permission checking
- Include recent paths dropdown and auto-complete
- Integrate with OS recent files list

4. CostIndicator.tsx - Cost display component
- Build cost display badges with color-coded levels
- Add estimated cost calculations for API features
- Include tooltips with detailed pricing information
- Implement different size variants (small, medium, large)

5. SettingsSection.tsx - Section container
- Build collapsible section containers for settings groups
- Add validation status indicators
- Implement progressive disclosure for advanced options
- Include help text and documentation links

6. ApiKeysSection.tsx - API keys management
- Build service selection dropdown (OpenAI, Midjourney, etc.)
- Add SecureInput components for each service
- Implement test connection functionality
- Include secure storage status indicators

7. FilePathsSection.tsx - File path configuration
- Build FileSelector components for input/output directories
- Add file type filtering for keyword files and templates
- Implement permission validation and error handling
- Include path validation and display

8. ParametersSection.tsx - Generation parameters
- Build toggle switches for boolean settings (Remove Background, etc.)
- Add sliders for quality settings
- Implement CostIndicator components for paid features
- Include parameter presets and advanced options

DATA STRUCTURES:

interface SettingsObject {
  apiKeys: {
    openai?: string;
    midjourney?: string;
    [key: string]: string | undefined;
  };
  filePaths: {
    inputDirectory: string;
    outputDirectory: string;
    templateFiles: string[];
  };
  parameters: {
    removeBackground: boolean;
    qualityLevel: 'low' | 'medium' | 'high';
    enableMetadata: boolean;
    enableQualityCheck: boolean;
    [key: string]: any;
  };
  advanced: {
    [key: string]: any;
  };
}

interface SettingsAdapter {
  getSettings(): Promise<SettingsObject>;
  saveSettings(settings: SettingsObject): Promise<void>;
  getApiKey(serviceName: string): Promise<string | null>;
  setApiKey(serviceName: string, apiKey: string): Promise<void>;
  selectFile(options: FileDialogOptions): Promise<string | null>;
  validateApiKey(serviceName: string, apiKey: string): Promise<boolean>;
  showOpenDialog(options: Electron.OpenDialogOptions): Promise<Electron.OpenDialogReturnValue>;
  isSecureStorageAvailable(): Promise<boolean>;
}

COMPONENT STRUCTURE:
<SettingsPanel>
  <SettingsTabs>
    <ApiKeysSection />
    <FilePathsSection />
    <ParametersSection />
    <AdvancedSection />
  </SettingsTabs>
  <SettingsActions>
    <SaveButton />
    <ResetButton />
  </SettingsActions>
</SettingsPanel>

DESIGN REQUIREMENTS:

Color Palette:
- Primary: #3B82F6 (blue-500)
- Success: #10B981 (emerald-500)
- Warning: #F59E0B (amber-500)
- Error: #EF4444 (red-500)
- Neutral: #6B7280 (gray-500)

Typography:
- Font: Inter (system font stack)
- Sizes: text-sm (14px), text-base (16px), text-lg (18px)
- Weights: font-normal (400), font-medium (500), font-semibold (600)

Spacing:
- Base unit: 4px (space-1)
- Common spacing: space-2 (8px), space-4 (16px), space-6 (24px)

Component Styling:
- Use Tailwind utility classes for all styling
- Implement hover and focus states for all interactive elements
- Add smooth transitions (transition-all duration-200)
- Use consistent border radius (rounded-md, rounded-lg)
- Implement proper focus rings (focus:ring-2 focus:ring-blue-500)

ACCESSIBILITY REQUIREMENTS:
- WCAG 2.1 AA compliance
- Minimum color contrast ratio of 4.5:1 for normal text
- Proper ARIA labels and roles for all form elements
- Keyboard navigation support for all interactive elements
- Screen reader friendly error messages and success confirmations
- Focus management for modal dialogs and form sections
- Use semantic HTML elements (button, input, label, fieldset)
- Add proper aria-describedby for help text
- Implement aria-live regions for dynamic content

PERFORMANCE CONSIDERATIONS:
- Implement debounced form validation (300ms delay)
- Use React.memo for expensive components
- Lazy load advanced settings sections
- Optimize re-renders with useCallback and useMemo
- Leverage native OS file dialogs for performance
- Use Electron's IPC for secure storage operations
- Implement window state persistence

SECURITY REQUIREMENTS:
- Never log or display API keys in plain text
- Use native OS credential manager (keytar) for secure storage
- Implement proper key validation before storage
- Add confirmation dialogs for key deletion
- Include security status indicators
- Handle cases where secure storage is unavailable
- Use Electron's IPC for secure key operations
- Validate all user inputs on both client and server
- Sanitize file paths and prevent directory traversal

DESKTOP OPTIMIZATION:
- Window size adaptation: Compact (800px), Standard (1024px), Large (1280px), Full Screen (1600px+)
- Native OS file dialog integration
- Drag-and-drop from OS file manager
- Keyboard shortcuts for power users
- Window state persistence
- Native OS notifications

DO NOT INCLUDE:
- External state management libraries (Redux, Zustand, etc.)
- Complex animations or heavy dependencies
- Server-side rendering or static generation
- Complex routing (use simple tab navigation)
- External UI component libraries (build custom components)
- Web-specific features (use desktop-optimized alternatives)

SCOPE:
You should only create:
- src/renderer/components/Settings/SettingsPanel.tsx
- src/renderer/components/Settings/SecureInput.tsx
- src/renderer/components/Settings/FileSelector.tsx
- src/renderer/components/Settings/CostIndicator.tsx
- src/renderer/components/Settings/SettingsSection.tsx
- src/renderer/components/Settings/ApiKeysSection.tsx
- src/renderer/components/Settings/FilePathsSection.tsx
- src/renderer/components/Settings/ParametersSection.tsx

Do NOT alter:
- Existing Electron main process files
- Preload script or IPC bridge
- Database models or backend services
- Existing React app structure or routing
- Package.json or build configuration
- Electron security policies or CSP settings

CRITICAL SUCCESS FACTORS:
1. Security First: All API keys must be handled securely with proper masking and native OS storage
2. User Experience: Immediate feedback for all user actions with clear error messages
3. Accessibility: Full WCAG 2.1 AA compliance with keyboard and screen reader support
4. Performance: Fast loading and responsive interactions with proper loading states
5. Desktop Integration: Leverage native OS capabilities for file dialogs and secure storage
6. Maintainability: Clean, well-documented code with proper TypeScript types

Remember: All AI-generated code will require careful human review, testing, and refinement to be considered production-ready. Pay special attention to security implementations and accessibility compliance. 