Generate ONLY the FilePathsSection.tsx React component file. Do not create any other files, folders, or project structure.

Create a single TypeScript React component file named FilePathsSection.tsx with the following requirements:

TECH STACK:
- React 18+ with TypeScript
- Tailwind CSS for styling
- Lucide React for icons
- Electron IPC for native file dialogs

COMPONENT: FilePathsSection.tsx
LOCATION: src/renderer/components/Settings/FilePathsSection.tsx

REQUIREMENTS:
- FileSelector components for input/output directories
- File type filtering for keyword files and templates
- Permission validation and error handling
- Path validation and display
- Recent paths integration

FEATURES:
- Input directory selection
- Output directory selection
- Template files selection
- File type filtering
- Permission checking
- Path validation
- Recent paths dropdown

COMPONENT STRUCTURE:
<FilePathsSection>
  <div className="space-y-6">
    <h2 className="text-xl font-semibold">File Paths</h2>
    
    <div className="space-y-4">
      <FileSelector
        label="Input Directory"
        value={inputDirectory}
        onChange={handleInputDirectoryChange}
        type="directory"
        placeholder="Select input directory for keyword files"
        helpText="Directory containing your keyword files and input data"
      />
      
      <FileSelector
        label="Output Directory"
        value={outputDirectory}
        onChange={handleOutputDirectoryChange}
        type="directory"
        placeholder="Select output directory for generated images"
        helpText="Directory where generated images will be saved"
      />
      
      <FileSelector
        label="Template Files"
        value={templateFiles}
        onChange={handleTemplateFilesChange}
        type="multiple"
        fileTypes={['.txt', '.csv', '.json']}
        placeholder="Select template files"
        helpText="Template files for custom prompts and configurations"
      />
    </div>
    
    <ValidationSummary />
  </div>
</FilePathsSection>

PROPS INTERFACE:
interface FilePathsSectionProps {
  inputDirectory: string;
  outputDirectory: string;
  templateFiles: string[];
  onInputDirectoryChange?: (path: string) => void;
  onOutputDirectoryChange?: (path: string) => void;
  onTemplateFilesChange?: (files: string[]) => void;
  onValidation?: (isValid: boolean) => void;
  isLoading?: boolean;
  error?: string | null;
}

FILE TYPES:
- Input files: .txt, .csv, .json
- Template files: .txt, .md, .json
- Image files: .png, .jpg, .jpeg, .webp
- All files: *

FEATURES:
- Directory selection for input/output
- Multiple file selection for templates
- File type filtering
- Permission validation
- Path validation
- Recent paths integration
- Error handling

VALIDATION:
- Check if directories exist
- Verify read/write permissions
- Validate file types
- Check path format
- Ensure paths are accessible

PERMISSION CHECKING:
- Read permissions for input directory
- Write permissions for output directory
- File access permissions
- Network drive accessibility

STYLING:
- Use Tailwind CSS classes
- Consistent spacing and typography
- Error state styling
- Loading state styling
- Success state styling

ACCESSIBILITY:
- Proper ARIA labels and descriptions
- Keyboard navigation support
- Screen reader announcements
- Focus management
- Error message announcements

NATIVE OS INTEGRATION:
- Use Electron's native file dialog
- Support for OS-specific file paths
- Integration with OS recent files
- Drag-and-drop from file manager

DO NOT INCLUDE:
- External file handling libraries
- Complex animations
- Server-side file operations
- External UI libraries

Generate ONLY the complete FilePathsSection.tsx file with all imports, interfaces, and implementation. Do not create any other files or project structure. 