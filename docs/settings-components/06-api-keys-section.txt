Generate ONLY the ApiKeysSection.tsx React component file. Do not create any other files, folders, or project structure.

Create a single TypeScript React component file named ApiKeysSection.tsx with the following requirements:

TECH STACK:
- React 18+ with TypeScript
- Tailwind CSS for styling
- Lucide React for icons
- Electron IPC for secure storage

COMPONENT: ApiKeysSection.tsx
LOCATION: src/renderer/components/Settings/ApiKeysSection.tsx

REQUIREMENTS:
- Service selection dropdown (OpenAI, Midjourney, etc.)
- SecureInput components for each service
- Test connection functionality
- Secure storage status indicators
- API key validation and management

FEATURES:
- Service selection with dropdown
- Secure input fields for each service
- Test connection buttons
- Secure storage status indicators
- Add/remove API keys
- Validation feedback
- Loading states for operations

COMPONENT STRUCTURE:
<ApiKeysSection>
  <div className="space-y-6">
    <div className="flex items-center justify-between">
      <h2 className="text-xl font-semibold">API Keys</h2>
      <button
        type="button"
        onClick={addNewService}
        className="px-4 py-2 bg-blue-500 text-white rounded-md"
      >
        Add Service
      </button>
    </div>
    
    {services.map(service => (
      <ServiceCard key={service.name}>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <ServiceIcon className="w-5 h-5" />
            <span className="font-medium">{service.name}</span>
          </div>
          <div className="flex items-center space-x-2">
            <SecureStorageStatus />
            <TestConnectionButton />
            <RemoveButton />
          </div>
        </div>
        <SecureInput
          label={`${service.name} API Key`}
          value={service.apiKey}
          onChange={handleApiKeyChange}
          serviceName={service.name}
        />
      </ServiceCard>
    ))}
  </div>
</ApiKeysSection>

PROPS INTERFACE:
interface ApiKeysSectionProps {
  onApiKeyChange?: (serviceName: string, apiKey: string) => void;
  onTestConnection?: (serviceName: string) => Promise<boolean>;
  onRemoveService?: (serviceName: string) => void;
  services?: ApiService[];
  isLoading?: boolean;
  error?: string | null;
}

interface ApiService {
  name: string;
  apiKey: string;
  isValid: boolean;
  isTested: boolean;
  secureStorageAvailable: boolean;
}

SUPPORTED SERVICES:
- OpenAI (GPT, DALL-E)
- Midjourney
- Stable Diffusion
- Custom services

FEATURES:
- Service selection dropdown
- Secure input for API keys
- Test connection functionality
- Secure storage status
- Add/remove services
- Validation feedback
- Loading states

SECURE STORAGE:
- Check if native credential manager is available
- Store API keys securely using keytar
- Show secure storage status
- Handle fallback when secure storage unavailable

TEST CONNECTION:
- Validate API key format
- Test actual API connection
- Show connection status
- Handle connection errors

VALIDATION:
- Real-time API key validation
- Format checking for each service
- Connection testing
- Error message display

STYLING:
- Use Tailwind CSS classes
- Service-specific icons
- Status indicators
- Loading states
- Error states

ACCESSIBILITY:
- Proper ARIA labels and descriptions
- Keyboard navigation support
- Screen reader announcements
- Focus management
- Error message announcements

DO NOT INCLUDE:
- External API libraries
- Complex state management
- External UI libraries
- Server-side validation

Generate ONLY the complete ApiKeysSection.tsx file with all imports, interfaces, and implementation. Do not create any other files or project structure. 