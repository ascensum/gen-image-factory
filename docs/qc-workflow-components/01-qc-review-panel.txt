SIMPLIFIED QC REVIEW PANEL COMPONENT

COMPONENT PURPOSE
Integrated failed images review interface that works within the existing dashboard structure, providing focused QC workflow without over-engineering.

VISUAL DESIGN
- Layout: Single-panel design integrated into existing dashboard tab system
- Background: bg-gray-50 with white panels (bg-white) - consistent with existing dashboard
- Borders: border-gray-200 for consistent styling
- Spacing: p-6, mb-4, gap-4 following existing patterns

INTEGRATION STRATEGY
- Tab Navigation: Add "Failed Images" tab to existing dashboard navigation
- Component Reuse: Extend existing ImageGallery component with failed images focus
- State Management: Use existing dashboard state and handlers
- Styling: Maintain visual consistency with current dashboard components

HEADER SECTION (48px height)

Failed Images Review Header
[Back to Dashboard] Failed Images Review [23 Failed Images] [Filters]

Elements:
- Back button (left) - text-gray-500 hover:text-gray-700
- Title "Failed Images Review" - text-xl font-semibold text-gray-900
- Status indicator (right) - bg-red-100 text-red-800 badge showing failed count
- Quick filter dropdown (right) - Filter by failure reason

MAIN CONTENT AREA (Single Panel - Full Width)

Enhanced Image Gallery for Failed Images

Failed Images Gallery
[Filters & Search Bar]
Filter: [All Reasons ▼] Search: [________] Sort: [Newest ▼]

[View Toggle: Grid/List] [Select All] [Bulk Actions]

[✓] Failed Image Card 1 - QC Failed
[✓] Failed Image Card 2 - Processing Error
[ ] Failed Image Card 3 - QC Failed
[ ] Failed Image Card 4 - Processing Error

Features:
- Failure Reason Filtering: Filter by QC Failed, Processing Error, etc.
- Search Functionality: Search in prompts and metadata (reuse existing)
- Grid/List View Toggle: Same as existing ImageGallery
- Bulk Selection: Checkboxes for bulk operations (reuse existing)
- Scrollable Gallery: Same behavior as existing ImageGallery

FAILED IMAGE CARDS (Enhanced from Existing)

Card Structure

[✓] Failed Image Thumbnail
[Image] [Failure Badge: QC Failed]

Failure Reason: Image resolution below threshold
Generation Prompt: [truncated prompt text...]

[Approve] [Retry] [Delete] [View Details]

Enhanced Elements:
- Failure Badge: Prominent red badge showing failure reason
- Failure Details: Brief explanation of why image failed
- Action Buttons: Approve, Retry, Delete, View Details
- Visual Indicators: Red borders and warning icons for failed status

QUICK ACTIONS PANEL (Bottom - Full Width)

Bulk Operations

Bulk Operations
[3 Selected] [Bulk Approve] [Bulk Delete]

Approval Notes: [________________________________________________] [Apply]

Simplified Operations:
- Bulk Approve: Approve multiple failed images with optional notes
- Bulk Delete: Delete multiple failed images with confirmation
- No Export: Not needed - approved images go to main dashboard
- No Complex Parameter Editing: Keep it simple

INTERACTIVE FEATURES
- Image Selection: Checkbox selection for bulk operations
- Quick Actions: Single-click approve/retry/delete
- Image Details: Click to view full image and metadata
- Keyboard Navigation: Arrow keys for image navigation (reuse existing)
- Context Menus: Right-click for quick actions (reuse existing)

RESPONSIVE BEHAVIOR
- Desktop: Full-width gallery with grid/list toggle
- Tablet: Responsive grid with collapsible filters
- Mobile: Single column with simplified actions

LOADING STATES
- Initial Load: Skeleton placeholders for images (reuse existing)
- Filtering: Loading spinner with "Filtering..." text
- Bulk Operations: Progress bar with operation count
- No Export: Not needed

ERROR HANDLING
- No Failed Images: Empty state with helpful message
- API Errors: User-friendly error messages with retry options (reuse existing)
- Validation Errors: Inline validation with helpful hints
- Network Issues: Offline indicator with sync when available

IMPLEMENTATION NOTES
- Extend Existing Components: Modify ImageGallery to handle failed images focus
- Reuse State Management: Use existing dashboard state and handlers
- Maintain Consistency: Follow existing Tailwind CSS patterns and component structure
- Minimal New Code: Focus on enhancing existing functionality rather than creating new components
