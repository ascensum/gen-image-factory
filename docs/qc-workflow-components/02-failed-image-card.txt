SIMPLIFIED FAILED IMAGE CARD COMPONENT

COMPONENT PURPOSE
Enhanced image card for failed images that integrates with existing ImageGallery component, providing focused QC workflow without over-engineering.

INTEGRATION STRATEGY
- Extend Existing: Enhance current ImageCard component in ImageGallery for failed images
- Reuse Patterns: Follow existing card structure and styling from ImageGallery
- Add QC Features: Minimal additions for failure status and quick actions
- Maintain Consistency: Use existing Tailwind CSS classes and responsive behavior

VISUAL DESIGN
- Base Structure: Same as existing image cards in ImageGallery
- Failure Indicators: Red borders, warning icons, and failure badges
- Action Buttons: Integrated approve/retry/delete buttons
- Status Display: Prominent failure reason and details

CARD STRUCTURE (Enhanced from Existing)

Basic Card Layout

[âœ“] Failed Image Card
[Image Thumbnail] [Failure Badge]

Failure Reason: [Brief explanation]
Generation Prompt: [Truncated prompt...]

[Approve] [Retry] [Delete] [View Details]

Enhanced Elements

1. Selection Checkbox
- Position: Top-left corner of card
- Style: w-4 h-4 text-blue-600 border-gray-300 rounded
- Behavior: Integrates with existing bulk selection system

2. Image Thumbnail
- Size: Same as existing image cards (w-32 h-32 object-cover)
- Failure Overlay: Red border (border-2 border-red-500) for failed status
- Warning Icon: Small warning icon overlay for visual emphasis

3. Failure Badge
- Position: Top-right corner of image
- Style: bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded-full
- Content: "QC Failed", "Processing Error", etc.
- Dynamic: Changes based on qc_reason field

4. Failure Details
- Reason: Brief explanation of failure (text-sm text-red-600)
- Prompt: Truncated generation prompt (text-sm text-gray-600)
- Metadata: Key generation parameters if relevant

5. Action Buttons
- Approve: bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded
- Retry: bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded
- Delete: bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded
- View Details: bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded

RESPONSIVE BEHAVIOR
- Desktop: Full card layout with all elements visible
- Tablet: Compact layout with stacked action buttons
- Mobile: Single column with simplified actions

INTERACTIVE FEATURES
- Hover Effects: Same as existing image cards
- Click Actions: Direct action execution (approve/retry/delete)
- Selection: Checkbox integration with bulk operations
- Keyboard: Tab navigation through action buttons

STATE MANAGEMENT
- Loading States: Same as existing image cards
- Error Handling: Inline error messages for failed actions
- Success Feedback: Visual confirmation for completed actions
- Selection State: Integrates with existing selection management

IMPLEMENTATION NOTES

Component Enhancement
// Extend existing ImageCard props
interface FailedImageCardProps extends ImageCardProps {
  qcStatus: 'failed';
  qcReason: string;
  onApprove: (imageId: string) => void;
  onRetry: (imageId: string) => void;
  onDelete: (imageId: string) => void;
}

Styling Integration
- Reuse Existing: Use same Tailwind classes as current image cards
- Add Failure Styles: Minimal red accent colors and warning indicators
- Maintain Consistency: Follow existing spacing, typography, and responsive patterns

Functionality Integration
- Reuse Handlers: Integrate with existing handleImageAction and handleBulkAction
- Extend State: Add failed images filtering to existing state management
- Maintain Performance: No additional API calls beyond existing functionality

KEY SIMPLIFICATIONS
- No Complex Layouts: Single card design consistent with existing
- No Parameter Editing: Simple retry with original settings
- No Separate Panels: All actions integrated into card
- No Complex Workflows: Direct approve/retry/delete actions

BENEFITS OF THIS APPROACH
1. Faster Development: Extend existing components rather than create new ones
2. Better Consistency: Maintains visual and behavioral consistency
3. Easier Maintenance: Less code duplication and simpler state management
4. User Familiarity: Users already know how to interact with image cards
5. Responsive Design: Automatically inherits existing responsive behavior
