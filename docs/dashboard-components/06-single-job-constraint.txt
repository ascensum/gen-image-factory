# Single Job Constraint Communication Component Specification

## Component Purpose
The Single Job Constraint Communication component ensures users clearly understand that only one job can run at a time. It provides visual indicators, messaging, and UI state management to communicate this constraint effectively.

## Layout Structure
```
┌─────────────────────────────────────────────────────────┐
│ Single Job Constraint Communication                   │
├─────────────────────────────────────────────────────────┤
│ Status: Ready (Green) | "Only one job can run at a time" │
│                                                         │
│ [Start New Job] (Enabled)                              │
│                                                         │
│ OR                                                      │
│                                                         │
│ Status: Job Running (Blue) | "Job #123 is currently running" │
│                                                         │
│ [Start New Job] (Disabled) | "Job already running"     │
└─────────────────────────────────────────────────────────┘
```

## Core Components

### 1. Status Indicator
- **Ready State**: Green badge with "Ready" text
- **Running State**: Blue badge with "Job Running" text and spinner
- **Error State**: Red badge with "Error" text
- **Constraint Message**: Clear explanation of single job rule

### 2. Start Job Button
- **Enabled State**: Blue button with "Start New Job" text
- **Disabled State**: Gray button with "Start New Job" and explanation
- **Loading State**: Blue button with spinner and "Starting..." text
- **Error State**: Red button with error message

### 3. Active Job Information
- **Job ID Display**: "Job #123 is currently running"
- **Progress Display**: "Step 3/5 - 60% Complete"
- **Time Display**: "Started 2 minutes ago"
- **Estimated Completion**: "Estimated completion in 3 minutes"

### 4. Constraint Messaging
- **Primary Message**: "Only one job can run at a time"
- **Secondary Message**: "Please wait for the current job to complete"
- **Error Message**: "A job is already running. Please stop the current job first."
- **Help Text**: "This ensures optimal performance and resource management"

## Visual Design

### Typography
- **Primary Font**: System default (San Francisco on macOS, Segoe UI on Windows)
- **Status Text**: 16px, font-weight: 600
- **Constraint Message**: 14px, color: Gray-600
- **Button Text**: 14px, font-weight: 500
- **Help Text**: 12px, color: Gray-500

### Spacing
- **Status Spacing**: 16px between status and message
- **Button Spacing**: 12px between button and explanation
- **Message Spacing**: 8px between primary and secondary messages
- **Component Spacing**: 24px between major components

### Colors
- **Ready Status**: Green-500 (#10B981) with green background
- **Running Status**: Blue-500 (#3B82F6) with blue background
- **Error Status**: Red-500 (#EF4444) with red background
- **Disabled Button**: Gray-300 (#D1D5DB) with 50% opacity
- **Constraint Text**: Gray-600 (#4B5563)

## Interactive Elements

### Status Badge Animation
- **Ready**: Static green badge
- **Running**: Pulsing blue badge with spinner
- **Error**: Static red badge with error icon
- **Transition**: Smooth color and text transitions

### Button State Transitions
- **Enabled → Disabled**: Smooth opacity and color change
- **Disabled → Enabled**: Immediate re-enable with animation
- **Loading State**: Spinner animation with disabled state
- **Error State**: Red color with error message

### Constraint Message Display
- **Dynamic**: Message changes based on current state
- **Animated**: Smooth transitions between messages
- **Contextual**: Different messages for different scenarios
- **Persistent**: Always visible when constraint is active

## Backend Integration

### Job State Monitoring
- **Real-time Updates**: Poll every 500ms for job status changes
- **State Synchronization**: Immediate UI updates on state changes
- **Error Handling**: Clear error messages for constraint violations
- **Recovery**: Automatic recovery when job completes or fails

### Constraint Enforcement
- **Backend Validation**: `job:start` returns error when job already running
- **UI Prevention**: Disable start button when job is running
- **User Feedback**: Clear messaging about why button is disabled
- **Recovery Options**: Provide options to stop current job

### Error Communication
- **Constraint Violation**: Clear error when user tries to start job while one is running
- **Network Error**: Offline indicator with retry option
- **Backend Error**: Technical error with user-friendly explanation
- **Recovery Guidance**: Clear instructions for resolving issues

## State Management

### Job States
- **Idle**: No job running, start button enabled
- **Starting**: Job is starting, show loading state
- **Running**: Job is running, start button disabled
- **Stopping**: Job is stopping, show stopping state
- **Completed**: Job completed, start button re-enabled
- **Failed**: Job failed, start button re-enabled with error

### Constraint States
- **No Constraint**: No job running, full functionality
- **Constraint Active**: Job running, start button disabled
- **Constraint Violation**: User tried to start job while one is running
- **Constraint Recovery**: Job completed, constraint lifted

### Message States
- **Ready Message**: "Ready to start a new job"
- **Running Message**: "Job #123 is currently running"
- **Error Message**: "A job is already running"
- **Recovery Message**: "Job completed, ready for new job"

## Accessibility

### Keyboard Navigation
- **Tab Order**: Status → Message → Start Button
- **Enter/Space**: Activate start button when enabled
- **Focus Management**: Clear focus indicators
- **Screen Reader**: Announce state changes

### Screen Reader Support
- **Status Announcements**: Announce job status changes
- **Constraint Messages**: Announce constraint information
- **Button States**: Announce button enabled/disabled states
- **Error Messages**: Announce error conditions

### Focus Management
- **Button Focus**: Visible focus indicator on start button
- **Status Focus**: Focus indicator on status badge
- **Message Focus**: Focus indicator on constraint message
- **Error Focus**: Focus on error message when constraint violated

## Responsive Design

### Desktop (800px+)
- **Layout**: Horizontal arrangement of status, message, and button
- **Message Display**: Full constraint message with explanation
- **Button Size**: Standard size (48px height)
- **Status Badge**: Full size with detailed information

### Tablet (600px-800px)
- **Layout**: Compressed horizontal arrangement
- **Message Display**: Abbreviated constraint message
- **Button Size**: Medium size (40px height)
- **Status Badge**: Medium size with essential information

### Mobile (<600px)
- **Layout**: Vertical stack arrangement
- **Message Display**: Essential constraint message only
- **Button Size**: Large size (56px height) for touch
- **Status Badge**: Small size with minimal information

## Performance Considerations

### Real-time Updates
- **Efficient Polling**: Poll every 500ms for status changes
- **Throttled Updates**: Throttle UI updates to prevent excessive re-renders
- **State Caching**: Cache job state to reduce API calls
- **Cleanup**: Clear timers and intervals on unmount

### Memory Management
- **Event Listeners**: Cleanup on unmount
- **State Cleanup**: Clear job state on component unmount
- **Timer Cleanup**: Clear status polling timers
- **Message Cleanup**: Clear message state on unmount

### Optimization
- **React.memo**: Memoize constraint components
- **useCallback**: Memoize event handlers
- **useMemo**: Memoize constraint calculations
- **Conditional Rendering**: Only render constraint components when needed

## Testing Requirements

### Unit Tests
- **Status Rendering**: Correct status display for each state
- **Button States**: Proper button enabled/disabled states
- **Message Display**: Correct constraint message for each scenario
- **State Transitions**: Proper state transitions

### Integration Tests
- **Backend Integration**: Real API calls for job status
- **Constraint Enforcement**: Proper constraint enforcement
- **Error Scenarios**: Network failure and error handling
- **Real-time Updates**: Status change handling

### E2E Tests
- **Constraint Workflow**: Start job → verify constraint → complete job
- **Error Recovery**: Constraint violation → error → recovery
- **Responsive Design**: Cross-device constraint communication
- **Accessibility**: Screen reader and keyboard navigation

## Error Scenarios

### Constraint Violations
- **User Tries to Start Job**: Clear error message with explanation
- **Backend Rejects Start**: Handle backend constraint enforcement
- **Network Error**: Offline indicator with retry option
- **Partial State**: Show available information with error indicator

### Recovery Scenarios
- **Job Completes**: Automatic re-enable of start button
- **Job Fails**: Re-enable with error message
- **User Stops Job**: Immediate re-enable of start button
- **System Recovery**: Automatic recovery from error states

### User Guidance
- **Clear Instructions**: Explain why constraint exists
- **Recovery Options**: Provide options to resolve constraint
- **Help Information**: Link to help documentation
- **Support Contact**: Contact information for persistent issues

## User Experience Considerations

### Clear Communication
- **Immediate Feedback**: Show constraint status immediately
- **Consistent Messaging**: Use consistent language across the interface
- **Visual Hierarchy**: Make constraint information prominent
- **Progressive Disclosure**: Show details on demand

### User Guidance
- **Helpful Explanations**: Explain why the constraint exists
- **Recovery Instructions**: Provide clear steps to resolve issues
- **Alternative Actions**: Suggest other actions while waiting
- **Progress Information**: Show progress of running job

### Error Prevention
- **Proactive Messaging**: Warn users before constraint violation
- **Visual Cues**: Use color and icons to indicate constraint status
- **Contextual Help**: Provide help when constraint is active
- **Graceful Degradation**: Handle constraint violations gracefully
